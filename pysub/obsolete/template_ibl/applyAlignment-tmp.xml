<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!-- 

==========================================================================================
                     Steering file template for the pysub framework

                               ==> fitter-tmp.xml <===

Author: Slava Libov, DESY <mailto:libvo@mail.desy.de>
Version: $Id: applyAlignment-tmp.xml,v 1.7 2009-08-01 13:59:45 libov Exp $
==========================================================================================

--> 

<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadAlignment"/>
      <!-- processor name="ApplyAlignment"/-->
      <processor name="ApplyAlignmentDirect"/>
      <processor name="ApplyAlignmentReverse"/>
      <processor name="Save"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> @InputFile@ </parameter>
      <parameter name="GearXMLFile" value="@GearPath@/@GearFile@"/>
      <parameter name="MaxRecordNumber" value="@RecordNumber@"/>
      <parameter name="SkipNEvents" value="@SkipNEvents@"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="MESSAGE"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="@HistoPath@/@Output@-alignedHit-histo"/>
  <!-- type of output file xml (default) or root ( only OpenScientist)-->
  <parameter name="FileType" type="string" value="root"/>
 </processor>

 <processor name="LoadAlignment" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> alignment @AlignmentFile@ alignment </parameter>
  <!-- one can load as many db files as he wants -->
  <!--parameter name="SimpleFileHandler" type="StringVec"> preAlignment  @preAlignmentFile@  preAlignment </parameter-->
</processor>

 <processor name="ApplyAlignment" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedHit</parameter>
  <!--Available methods are:
 0 --> shift only 
 1 --> rotation first 
 2 --> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="true"/>
 </processor>


 <processor name="ApplyAlignmentDirect" type="EUTelApplyAlignmentProcessor">
 <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string" lcioOutType="TrackerHit"> alignedHit</parameter>
  <!--Available methods are:
 0 --> shift only 
 1 --> rotation first 
 2 --> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <parameter name="ApplyAlignmentDirection" type="int" value="0"/>
  <!--parameter name="alignmentCollectionNames" type="vec" > preAlignment
  alignment </parameter-->
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
    <parameter name="DEBUG" type="bool" value="false"/>
    <parameter name="Alpha" type="float" value="0.0"/>
    <parameter name="Beta"  type="float" value="0.0"/>
    <parameter name="Gamma" type="float" value="0.0"/>
    <parameter name="PrintEvents" type="int" value="3"/>
  <parameter name="DoGear" type="bool" value="true"/>
</processor>

 <processor name="ApplyAlignmentReverse" type="EUTelApplyAlignmentProcessor">
  <!--Apply to the input hit the alignment corrections-->
  <!--Alignment constant from the condition file-->
  <parameter name="AlignmentConstantName" type="string" lcioInType="LCGenericObject"> alignment </parameter>
  <!--The name of the input hit collection-->
  <parameter name="InputHitCollectionName" type="string"  lcioInType="TrackerHit"> alignedHit </parameter>
  <!--The name of the output hit collection-->
  <parameter name="OutputHitCollectionName" type="string"  lcioOutType="TrackerHit"> antiAlignedHit</parameter>
  <!--Available methods are:
     0 --> shift only 
     1 --> rotation first 
     2 --> shift first -->
  <parameter name="CorrectionMethod" type="int" value="1"/>
  <parameter name="ApplyAlignmentDirection" type="int" value="1"/>
  <parameter name="alignmentCollectionNames" type="vec" >  alignment </parameter>
  <!--Enable or disable histograms-->
  <parameter name="HistogramSwitch" type="bool" value="false"/>
    <parameter name="DEBUG" type="bool" value="false"/>
    <parameter name="Alpha" type="float" value="0.0"/>
    <parameter name="Beta"  type="float" value="0.0"/>
    <parameter name="Gamma" type="float" value="0.0"/>
    <parameter name="PrintEvents" type="int" value="3"/>
   <parameter name="DoGear" type="bool" value="true"/>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec">  </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string"  value="@ResultsFolder@/@Output@-alignedHit.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!-- parameter name="SplitFileSizekB" type="int" value="100000"/ -->
</processor>

   
</marlin>
