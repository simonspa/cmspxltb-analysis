<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Thu Dec 18 19:01:10 2008

   WARNING: - Please be aware that comments made in the original steering file were lost.
            - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
            - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

   <execute>
      <processor name="AIDA"/>
      <processor name="LoadPedestal"/>
      <processor name="CopyPedestal"/>
      <processor name="ApplyPedestal"/>
      <processor name="Clustering"/>
      <processor name="CorrelationBeforeFilter"/>
      <processor name="Filter"/>
      <processor name="FilterHisto"/>
      <processor name="CorrelationAfterFilter"/>
      <processor name="HotPixelKiller"/>
      <processor name="Save"/>
   </execute>

   <global>
      <parameter name="LCIOInputFiles"> lcio-raw/run@RunNumber@.slcio </parameter>
      <parameter name="GearXMLFile" value="gear_telescope.xml"/>
      <parameter name="MaxRecordNumber" value="10000000000"/>
      <parameter name="SkipNEvents" value="0"/>
      <parameter name="SupressCheck" value="false"/>
      <parameter name="Verbosity" value="MESSAGE"/>
   </global>

 <processor name="AIDA" type="AIDAProcessor">
 <!--Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
  <!-- compression of output file 0: false >0: true (default) -->
  <parameter name="Compress" type="int" value="1"/>
  <!-- filename without extension-->
  <parameter name="FileName" type="string" value="histo/run@RunNumber@-filter-histo"/>
  <!-- type of output file xml (default) or root ( only OpenScientist)-->
  <parameter name="FileType" type="string" value="root"/>
</processor>

 <processor name="LoadPedestal" type="ConditionsProcessor">
 <!--ConditionsProcessor provides access to conditions data  transparently from LCIO files or a databases, using LCCD-->
  <!--Initialization of a conditions database handler-->
  <!--parameter name="DBCondHandler" type="StringVec"> conditionsName /lccd/myfolder HEAD </parameter-->
  <!--Initialization of a conditions db file handler-->
  <!--parameter name="DBFileHandler" type="StringVec"> conditionsName conditions.slcio collectionName </parameter-->
  <!--Initialization string for conditions database-->
  <parameter name="DBInit" type="string" value="localhost:lccd_test:calvin:hobbes"/>
  <!--Initialization of a data file handler-->
  <!--parameter name="DataFileHandler" type="StringVec" value="conditionsName"/-->
  <!--Initialization of a simple conditions file handler-->
  <parameter name="SimpleFileHandler" type="StringVec"> statusDB db/run@PedeRunNumber@-ped-db.slcio statusDB </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> noiseDB db/run@PedeRunNumber@-ped-db.slcio noiseDB </parameter>
  <parameter name="SimpleFileHandler" type="StringVec"> pedestalDB db/run@PedeRunNumber@-ped-db.slcio pedestalDB </parameter>
</processor>

 <processor name="CopyPedestal" type="EUTelCopyPedestalProcessor">
 <!--EUTelCopyPedestalProcessor copies the condition data into local writable collections-->
  <!--Noise input condition-->
  <parameter name="NoiseConditionName" type="string" lcioInType="TrackerData"> noiseDB </parameter>
  <!--Pedestal input condition-->
  <parameter name="PedestalConditionName" type="string" lcioInType="TrackerData"> pedestalDB </parameter>
  <!--Status input condition-->
  <parameter name="StatusConditionName" type="string" lcioInType="TrackerRawData"> statusDB </parameter>
  <!--Noise local collection-->
  <parameter name="NoiseCollectionName" type="string" lcioOutType="TrackerData"> noise </parameter>
  <!--Pedestal local collection-->
  <parameter name="PedestalCollectionName" type="string" lcioOutType="TrackerData"> pedestal </parameter>
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioOutType="TrackerRawData"> status </parameter>
</processor>

 <processor name="ApplyPedestal" type="EUTelCalibrateEventProcessor">
 <!--EUTelCalibrateEventProcessor subtracts the pedestal value from the input data-->
  <!--Noise from the condition file-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
  <!--Pedestal from the condition file-->
  <parameter name="PedestalCollectionName" type="string" lcioInType="TrackerData"> pedestal </parameter>
  <!--Input raw data collection-->
  <parameter name="RawDataCollectionName" type="string" lcioInType="TrackerRawData"> rawdata </parameter>
  <!--Pixel status from the condition file-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--Name of the output calibrated data collection-->
  <parameter name="CalibratedDataCollectionName" type="string" lcioOutType="TrackerData"> data </parameter>
  <!--Flag to switch on (1) or off (0) the detector debug histogram filling-->
  <parameter name="DebugHistoFilling" type="bool" value="false"/>
  <!--This is the name of the histogram information file-->
  <parameter name="HistoInfoFileName" type="string" value="histoinfo.xml"/>
  <!--Threshold of pixel SNR for hit rejection-->
  <parameter name="HitRejectionCut" type="float" value="3.5"/>
  <!--Maximum allowed number of rejected pixel per event-->
  <parameter name="MaxNoOfRejectedPixels" type="int" value="15000"/>
  <!--Flag to switch on (1) or off (0) the common mode suppression algorithm-->
  <parameter name="PerformCommonMode" type="bool" value="true"/>
</processor>

 <processor name="Clustering" type="EUTelClusteringProcessor">
 <!--EUTelClusteringProcessor is looking for clusters into a calibrated pixel matrix.-->
  <!--Input calibrated data not zero suppressed collection name-->
  <parameter name="NZSDataCollectionName" type="string" lcioInType="TrackerData"> data </parameter>
  <!--Noise (input) collection name-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noise </parameter>
  <!--Pixel status (input) collection name-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--Input of Zero Suppressed data-->
  <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata </parameter>
  <!--Cluster (output) collection name-->
  <parameter name="PulseCollectionName" type="string" lcioOutType="TrackerPulse"> cluster </parameter>
  <!--Threshold in SNR for cluster identification-->
  <parameter name="ClusterCut" type="float" value="3.0"/>
  <!--The list of cluster N to be filled.For example 7 means filling the cluster spectra with the 7 most significant pixels-->
  <!--parameter name="ClusterN" type="IntVec" value=""/-->
  <!--The list of cluster NxN to be filled.For example 3 means filling the 3x3 histogram spectrum-->
  <parameter name="ClusterNxN" type="IntVec" value="3"/>
  <!--Maximum allowed cluster size along x (only odd numbers)-->
  <parameter name="ClusterSizeX" type="int" value="3"/>
  <!--Maximum allowed cluster size along y (only odd numbers)-->
  <parameter name="ClusterSizeY" type="int" value="3"/>
  <!--Select here which algorithm should be used for clustering.
Available algorithms are:
-> FixedFrame: for custer with a given size-->
  <parameter name="ClusteringAlgo" type="string" value="FixedFrame"/>
  <!--This is the name of the histogram information file-->
  <parameter name="HistoInfoFileName" type="string" value="histoinfo.xml"/>
  <!--Switch on or off the histogram filling-->
  <parameter name="HistogramFilling" type="bool" value="true"/>
  <!--Minimum distance between sparsified pixel ( touching == sqrt(2)) -->
  <parameter name="MinDistance" type="float" value="0"/>
  <!--Threshold in SNR for seed pixel identification-->
  <parameter name="SeedPixelCut" type="float" value="3.5"/>
  <!--Threshold in SNR for clusters contained in ZS data-->
  <parameter name="ZSClusterCut" type="float" value="2.5"/>
  <!--Select here which algorithm should be used for clustering.
Available algorithms are:
-> SparseCluster: for cluster in ZS frame
-> SparseCluster2: for cluster in ZS frame with better performance
-> FixedFrame: for cluster with a given size-->
  <parameter name="ZSClusteringAlgo" type="string" value="FixedFrame"/>
  <!--Threshold in SNR for seed pixel contained in ZS data-->
  <parameter name="ZSSeedCut" type="float" value="3.5"/>
</processor>

 <processor name="CorrelationBeforeFilter" type="EUTelCorrelator">
 <!--EUTelCorrelator fills histograms with correlation plots-->
  <!--Cluster (pulse) collection name-->
  <parameter name="InputClusterCollectionName" type="string" lcioInType="TrackerPulse"> cluster </parameter>
  <!--Hit collection name-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
</processor>

 <processor name="Filter" type="EUTelClusterFilter">
 <!--EUTelClusterFilter is a very powerful tool. It allows to select among an input collection of TrackerPulse
only the clusters fulfilling a certain set of selection criteria.
The user can modify the switch on and off each selection cut and set the proper value for that via the processor parameter.-->
  <!--This is the input Tracker Pulse collection that should be filtered-->
  <parameter name="InputPulseCollectionName" type="string" lcioInType="TrackerPulse"> cluster </parameter>
  <!--This is the name of the noise collection.
The presence of this collection in the event is allowing all the noise based selection cuts-->
  <parameter name="NoiseCollectionName" type="string" lcioInType="TrackerData"> noiseDB </parameter>
  <!--This is the name of the status collection.
The presence of this collection in the event is allowing all the noise based selection cuts-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--This is the output Tracker Pulse collection containing the filtered clusters-->
  <parameter name="OutputPulseCollectionName" type="string" lcioOutType="TrackerPulse"> filteredcluster </parameter>
  <!--This is the minimum allowed total charge in to a cluster.
One floating point number for each sensor in the telescope-->
  <parameter name="ClusterMinTotalCharge" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--This is the minimum charge that a cluster of N pixels has to have.
The first figure has to be the number of pixels to consider in the cluster, 
then one float number for each sensor.-->
  <parameter name="ClusterNMinCharge" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--This is the minimum SNR that a cluster of N pixels has to have.
The first figure has to be the number of pixels to consider in the cluster, 
then one float number for each sensor. Setting N = 0 is enough to disable the cut.-->
  <parameter name="ClusterNMinSNR" type="FloatVec"> 0 0 0 0 0 0 </parameter>
  <!--This is the minimum charge that a cluster of N times N pixels has to have.
The first figure is the subcluster size in pixels (odd number), then one floating number for each 
planes. To switch this selection off, set all numbers to zero.-->
  <parameter name="ClusterNxNMinCharge" type="FloatVec"> 0 0 0 0 0 0 0 </parameter>
  <!--This is the minimum SNR that a cluster of N times N pixels has to have.
The first figure is the subcluster size in pixels (odd number), then one floating number for each 
planes. To switch this selection off, set at least the first number to zero.-->
  <parameter name="ClusterNxNMinSNR" type="FloatVec"> 3 5.0 5.0 5.0 5.0 5.0 </parameter>
  <!--This is the required quality for the cluster.
One integer number for each detector according to ClusterQuality.
Put a negative number to disable the cut-->
  <parameter name="ClusterQuality" type="IntVec"> -1 -1 -1 -1 -1 </parameter>
  <!--Define here ROI's. The first number (integer) is the detector ID.
The other four float are xBotLeft  yBotLeft xTopRight yTopRight.
To disable it, just put a negative number as detector ID.-->
  <parameter name="InsideRegion" type="FloatVec"> -1 10 10 40 40 </parameter>
  <!--This is maximum allowed cluster noise.
One floating number for each detector. Write a negative number to disable the cut-->
  <parameter name="MaxClusterNoise" type="FloatVec"> -1 -1 -1 -1 -1 </parameter>
  <!--This is the maximum allowed number of cluster per plane.
 One integer number for each detector. Write a negative number to disable the cut-->
  <parameter name="MaxClusterPerPlane" type="IntVec"> 100 100 100 100 100 100 </parameter>
  <!--This is the minimum required number of cluster per plane.
One integer number for each detector. Write 0 to disable the cut-->
  <parameter name="MinClusterPerPlane" type="IntVec"> 0 0 0 0 0 </parameter>
  <!--This is the minimum allow total cluster SNR
One floating number for each detector. Write 0 to disable the cut-->
  <parameter name="MinTotalClusterSNR" type="FloatVec"> 0 0 0 0 0 </parameter>
  <!--Define here ROI's. The first number (integer) is the detector ID.
The other four float are xBotLeft  yBotLeft xTopRight yTopRight.
To disable it, just put a negative number as detector ID.-->
  <parameter name="OutsideRegion" type="FloatVec"> -1 131 119 135 123  </parameter>
  <!--Setting this to true will select only events having the same number 
of hits for each plane.-->
  <parameter name="SameNumberOfHits" type="bool" value="false"/>
  <!--This is the minimum allowed charge that the seed pixel of a cluster has to have.
One floating number for each detector-->
  <parameter name="SeedMinCharge" type="FloatVec"> 0 0 0 0 0 </parameter>
  <!--This is the minimum allowed SNR that the seed pixel of a cluster has to have.
One floating number for each detector. Set to 0 to disable-->
  <parameter name="SeedMinSNR" type="FloatVec"> 6.0 6.0 6.0 6.0 6.0 </parameter>
  <!--If true, a SkipEventException is thrown if after selection
there are no cluster left.-->
  <parameter name="SkipEmptyEvent" type="bool" value="true"/>
</processor>

 <processor name="FilterHisto" type="EUTelHistogramMaker">
 <!--EUTelHistogramMaker fills reference and control histograms-->
  <!--Input tracker pulse collection-->
  <parameter name="PulseCollectionName" type="string" lcioInType="TrackerPulse"> filteredcluster </parameter>
  <!--The list of cluster N to be filled.For example 7 means filling the cluster spectra with the 7 most significant pixels-->
  <!--parameter name="ClusterN" type="IntVec"> 4 9 14 19 25 </parameter-->
  <!--The list of cluster NxN to be filled.For example 3 means filling the 3x3 histogram spectrum-->
  <!--parameter name="ClusterNxN" type="IntVec"> 3 5 </parameter-->
  <!--This is the name of the histogram information file-->
  <parameter name="HistoInfoFileName" type="string" value="histoinfo.xml"/>
  <!--The name of the noise collection.
Needed to fill in noise related histograms-->
  <!--parameter name="NoiseCollectionName" type="string" value="noise"/-->
  <!--The name of the status collection.
Needed to fill in noise related histograms-->
  <!--parameter name="StatusCollectionName" type="string" value="status"/-->
</processor>

 <processor name="CorrelationAfterFilter" type="EUTelCorrelator">
 <!--EUTelCorrelator fills histograms with correlation plots-->
  <!--Cluster (pulse) collection name-->
  <parameter name="InputClusterCollectionName" type="string" lcioInType="TrackerPulse"> filteredcluster </parameter>
  <!--Hit collection name-->
  <parameter name="InputHitCollectionName" type="string" lcioInType="TrackerHit"> hit </parameter>
</processor>

 <processor name="HotPixelKiller" type="EUTelHotPixelKiller">
 <!--EUTelHotPixelKiller periodically check for pixel singing loud too often and remove them from the analysis-->
  <!--Pixel status collection-->
  <parameter name="StatusCollectionName" type="string" lcioInType="TrackerRawData"> status </parameter>
  <!--This float number [0,1] represents the maximum allowed firing frequency
within the selected number of event per cycle-->
  <parameter name="MaxAllowedFiringFreq" type="float" value="0.15"/>
  <!--The number of events to be considered for each update cycle-->
  <parameter name="NoOfEventPerCycle" type="int" value="100"/>
  <!--The total number of hot pixel cycle-->
  <parameter name="TotalNoOfCycle" type="int" value="5"/>
</processor>

 <processor name="Save" type="EUTelOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <parameter name="DropCollectionNames" type="StringVec"> rawdata status noise pedestal data zsdata cluster </parameter>
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec" value="MCParticlesSkimmed"/-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec" value="MyPreciousSimTrackerHits"/-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string" value="results/run@RunNumber@-filter-p@PedeRun@.slcio"/>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>
  <!--Set it to true to remove intermediate EORE in merged runs-->
  <parameter name="SkipIntermediateEORE" type="bool" value="true"/>
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int" value="1992294"/-->
</processor>

</marlin>
